# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AWRqWeMB3NqV8-IwYk9l4NeThNk3jYvS
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import nltk
import string
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

# Load dataset
@st.cache_data

def load_data():
    df = pd.read_csv("/content/english_news_dataset.csv")
    df.dropna(subset=['Content'], inplace=True)
    df['Content'] = df['Content'].astype(str)
    return df

# Text preprocessing
def preprocess(text):
    text = text.lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    words = text.split()
    words = [stemmer.stem(word) for word in words if word not in stop_words]
    return ' '.join(words)

# Initialize session state
if 'query_history' not in st.session_state:
    st.session_state.query_history = []
if 'liked_articles' not in st.session_state:
    st.session_state.liked_articles = set()
if 'disliked_articles' not in st.session_state:
    st.session_state.disliked_articles = set()

st.title("📰 Personalized News Recommendation Bot")
st.markdown("Enter your interests or ask about recent news topics. We'll recommend relevant news for you!")

user_query = st.text_input("🔍 Your Query:")
data = load_data()

# Optional category filter
all_categories = sorted(set(eval(cat)[0] for cat in data['News Categories'].unique()))
selected_category = st.selectbox("📂 Filter by Category (optional):", ["All"] + all_categories)

# Apply category filter if selected
if selected_category != "All":
    data = data[data['News Categories'].str.contains(selected_category)]

# Load BERT model
@st.cache_resource

def load_model():
    return SentenceTransformer('all-MiniLM-L6-v2')

model = load_model()

# Encode news content
@st.cache_data

def encode_corpus(corpus):
    return model.encode(corpus, show_progress_bar=True)

embeddings = encode_corpus(data['Content'].tolist())

if user_query:
    query_embedding = model.encode([user_query])[0]
    st.session_state.query_history.append(query_embedding)
    user_profile = np.mean(st.session_state.query_history, axis=0)

    similarity_scores = cosine_similarity([user_profile], embeddings).flatten()
    top_indices = similarity_scores.argsort()[::-1]

    st.subheader("📌 Recommended News:")
    shown = 0
    for i in top_indices:
        if shown >= 5:
            break
        if i in st.session_state.liked_articles or i in st.session_state.disliked_articles:
            continue

        st.markdown(f"**{data.iloc[i]['Headline']}**")
        st.markdown(f"{data.iloc[i]['Content'][:250]}...")
        st.markdown(f"_Category: {data.iloc[i]['News Categories']} | Date: {data.iloc[i]['Date']}_")

        col1, col2 = st.columns(2)
        with col1:
            if st.button(f"👍 Like {i}"):
                st.session_state.liked_articles.add(i)
        with col2:
            if st.button(f"👎 Dislike {i}"):
                st.session_state.disliked_articles.add(i)

        st.markdown("---")
        shown += 1

# Option to reset session
if st.button("🔄 Reset History"):
    st.session_state.query_history = []
    st.session_state.liked_articles = set()
    st.session_state.disliked_articles = set()
    st.success("History cleared. Start fresh!")

